打包工具 webpack&Parcel

webpack

webpack 是一种前端资源构建工具，是一个静态模块打包器。
将一些浏览器识别不了语法，统一整合成浏览器可以识别的语法。解决了分别编译费时费力的问题。
将一些样式、字体、图片等资源与引入资源的js文件做成关系依赖图，形成chunk块，再对块进行处理，经过打包，形成bundle。

webpack 有五个核心的概念。 entry、output、loader、plugins。 
入口entry（以哪个文件为入口起点开始打包，分析构建内部依赖图）
出口output（webpack打包后的资源bundles输出到哪里去，以及如何命名）
加载loader（让webpack能够去处理非JavaScript文件）
插件plugins（用于执行范围更广的任务）
模式mode（开发/生产）
因为有着这些概念，webpack是高度可配置的。

                                              //   看似都能理解，实际感觉每一步都不太会具体操作


parcel

相比webpack, parcel在使用上更为简单。parcel不需要安装任何插件，也不需要进行配置。
parcel支持许多开箱即用的转换器和内置的编译器。
例如可以使用 Babel 转换 JavaScript ，使用 PostCSS 转换 CSS ，使用 PostHTML 转换 HTML。

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


ES6

变量的解构赋值

解构本质上来说，就是模式的匹配。按照一定模式，从数组和对象中提取值，对变量进行赋值。
只要等号两边的模式相同，左边的变量就会被赋予对应的值。

解构的简单应用

1.交换变量的值

2.从函数中返回多个值

3.提取json    //没用过， 不太懂用这个做什么

let jsonData = {
    id:42,
    status:"OK",
    data:[876, 5309],
}

let {id, status, data, number} = jsonData;

4.map的遍历    //也没看太懂

var map=new Map()
map.set('fist','hello');
map.set('second','world');
for(let [key, value] of map){
    console.log(key, value);
}

// 只遍历key
for(let [key] of map){
    console.log(key);
}

// 只遍历value
for(let [, value] of value){
    console.log(value);
}


字符串的扩展方法




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

JS 语法转换插件 babel

babel是一个JavaScript编译器
主要用于将ES6版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中

编译过程分为三个阶段：解析、转换和生成。
babel 本身不具有任何转化功能，需要配置插件，转化的功能会被分配到一个个plugin里。

插件分为语法插件和转译插件

语法插件让babel能够解析更多种语法而不报错。
转译插件则是把源码转换为我们需要的形式并输出。

配置插件时需要两步

1.将插件的名字增加到配置文件中 (根目录下创建 .babelrc 或者 package.json 的 babel 里面，格式相同)
2.使用 npm install babel-plugin-xxx 进行安装


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

antd

antd 是基于 Ant Design 设计体系的 React UI 组件库

form表单
高性能表单控件，自带数据域管理。包含数据录入、校验以及对应样式。

list列表
可承载文字、列表、图片、段落，常用于后台数据展示页面。

table表格
展现大量结构化的数据
对数据进行排序、搜索、分页、自定义操作等复杂行为

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


dva

dva是react的轻框架

dva = React-Router + Redux + Redux-saga

核心概念
State：一个对象，保存整个应用状态
View：React 组件构成的视图层
Action：一个对象，描述事件
connect 方法：一个函数，绑定 State 到 View
dispatch 方法：一个函数，发送 Action 到 State
...            // 未看完
